<?php
/**
 * @file
 * The main file for Checkmail.
 *
 * The Checkmail module displays statistical information about a user's mailbox.
 *
 * This module generates a page and/or a block, which displays statistical
 * information about an e-mail inbox, including the number of messages and
 * size of the mailbox.
 *
 * @author Stefan Nagtegaal <Stefan at: Sempre-Crescendo.nl>
 * @author Kristjan Jansen
 * @author David Kent Norman <deekayen at: deekayen {dot} net>
 * @author Jason Flatt http://drupal.org/user/4649
 *
 * @todo create proper theming functions.
 */

/**
 * Implementation of hook_help().
 */
function checkmail_help($path, $arg) {
  switch ($path) {
    case 'admin/help#checkmail':
      $help_text = t('Displays statistical information about an e-mail inbox, including the number of messages and size of the mailbox.');
      break;
  }

  return $help_text;
}


/**
 * Implementation of hook_perm().
 */
function checkmail_perm() {
  return array('access checkmail', 'administer checkmail');
}


/**
 * Implementation of hook_menu().
 */
function checkmail_menu() {
  $items = array();

  $items['admin/settings/checkmail'] = array(
    'title' => 'Checkmail',
    'access arguments' => array('administer checkmail'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('checkmail_admin_settings'),
    'description' => 'Configure the settings for the mailbox to check.',
    'file' => 'checkmail.admin.inc',
  );
  $items['checkmail'] = array(
    'title' => 'Check e-mail',
    'access arguments' => array('access checkmail'),
    'page callback' => 'checkmail_page',
    'description' => 'Display the mailbox information.',
  );

  return $items;
}


/**
 * Implementation of hook_user().
 */
function checkmail_user($op, &$edit, &$account, $category = NULL) {
  $checkmail_account_info = variable_get('checkmail_account_info', '');
  $description = '';
  if (variable_get('checkmail_use_encryption', 0) == 0) {
    $description = t(' NOTE: The password is stored in the database, and it is not encrypted.');
  }
  switch ($op) {
    case 'form':
      if ($category == 'account' && user_access('access checkmail') && $checkmail_account_info == 'user_fields') {
        $form['checkmail_authentication_settings'] = array(
          '#type'        => 'fieldset',
          '#title'       => t('Checkmail authentication settings'),
          '#collapsible' => TRUE,
          '#weight'      => 1,
        );
        $form['checkmail_authentication_settings']['checkmail_username'] = array(
          '#type'          => 'textfield',
          '#title'         => t('E-mail account log in ID'),
          '#default_value' => $account->checkmail_username,
          '#description'   => t('The login id for your e-mail account.'),
          '#required'      => TRUE,
        );
        $form['checkmail_authentication_settings']['checkmail_passsword'] = array(
          '#type'        => 'password_confirm',
          '#description' => t('The password for your e-mail account.') . $description,
        );
      }
      return $form;
      break;

    case 'insert':
      if ($checkmail_account_info == 'user_account' || $checkmail_account_info == 'user_fields') {
        $edit['checkmail_username']  = $edit['mail'];
        module_load_include('inc', 'checkmail', 'checkmail.common');
        $edit['checkmail_passsword'] = _checkmail_encrypt_password($edit['pass']);
      }
      break;

    case 'register':
      if (user_access('access checkmail') && $checkmail_account_info == 'user_fields') {
        $form['checkmail_email_settings'] = array(
          '#type'        => 'fieldset',
          '#title'       => t('Basic webmail account settings'),
          '#collapsible' => TRUE,
          '#weight'      => 1,
        );
        $form['checkmail_email_settings']['checkmail_username'] = array(
          '#type'          => 'textfield',
          '#title'         => t('E-mail account login'),
          '#default_value' => $account->checkmail_username,
          '#description'   => t('The login id for your e-mail account.'),
          '#required'      => TRUE,
        );
        $form['checkmail_email_settings']['checkmail_passsword'] = array(
          '#type'        => 'password_confirm',
          '#description' => t('The password for your e-mail account.') . $description,
        );
      }
      return $form;
      break;

    case 'update':
      if ($category == 'account' && ($checkmail_account_info == 'user_account' || $checkmail_account_info == 'user_fields')) {
        if ($edit['mail'] != $account->mail) {
          $edit['checkmail_username'] = $edit['mail'];
        }
        else {
          $edit['checkmail_username'] = $account->mail;
        }

        module_load_include('inc', 'checkmail', 'checkmail.common');
        if ($edit['pass'] != '') {
          $edit['checkmail_passsword'] = _checkmail_encrypt_password($edit['pass']);
        }
        else {
          $edit['checkmail_passsword'] = _checkmail_encrypt_password($account->checkmail_passsword);
        }
      }
      break;
  }
}


/**
 * Implementation of hook_block().
 */
function checkmail_block($op = 'list', $delta = 0, $edit = array()) {
  $block = $blocks = array();
  switch ($op) {
    case 'list':
      if (user_access('administer checkmail')) {
        $blocks[0]['info'] = t('Check e-mail');
        return $blocks;
      }
      break;

    case 'configure':
      if (user_access('administer checkmail')) {
        $cache_options = array('no cache', 30 => t('30 seconds'), 60 => t('1 minute'), 300 => t('5 minutes'), 600 => t('10 minutes'), 900 => t('15 minutes'), 1800 => t('30 minutes'), 3600 => t('1 hour'), 21600 => t('6 hours'), 43200 => t('12 hours'), 86400 => t('1 day'));
        $form['block_cache'] = array(
          '#type'          => 'select',
          '#title'         => t('Cache'),
          '#default_value' => variable_get('checkmail_block_cache', 60),
          '#options'       => $cache_options,
          '#description'   => t('Cache the mail results for this amount of time before querying the server again.'),
          '#required'      => FALSE,
        );
        return $form;
      }

      // @TODO: Add options for display of text & quick access to the e-mails?

      break;

    case 'save':
      if (user_access('administer checkmail')) {
        if ($delta == 0) {
          variable_set('checkmail_block_subject', $edit['block_subject']);
          variable_set('checkmail_block_cache', $edit['block_cache']);
        }
      }
      break;

    case 'view': default:
      switch ($delta) {
        case 0:
          $time = time();
          $cache = variable_get('checkmail_block_cache', 60);
          $last_check = variable_get('checkmail_checked_time', $time);

          if ((!$cache || $time == $last_check) || ($cache > 0 && $time > $last_check + $cache)) {
            $mail = _checkmail();
          }
          else {
            $mail = array();
            $mail['status']   = 'success';
            $mail['messages'] = variable_get('checkmail_cache_num', t('cache not set!'));
            $mail['size']     = variable_get('checkmail_cache_mem', t('cache not set!'));
            $mail['recent']   = variable_get('checkmail_cache_recent', t('cache not set!'));
            $mail['unread']   = variable_get('checkmail_cache_unread', t('cache not set!')) + $mail['recent'];
          }

          if ($mail['status'] == 'success') {
            $block['content'] = t('Mailbox statistics for ') . $mail['login_id'] . ':';
            $block['content'] .= '<br /><ul>';

            if (variable_get('checkmail_number_of_messages', 1)) {
              $block['content'] .= '<li>' . $mail['messages'] . t(' total messages') . '</li>';
            }
            if (variable_get('checkmail_number_of_recent_messages', 1)) {
              $block['content'] .= '<li>' . $mail['recent'] . t(' new messages') . '</li>';
            }
            if (variable_get('checkmail_number_of_unread_messages', 1)) {
              $block['content'] .= '<li>' . $mail['unread'] . t(' unread messages') . '</li>';
            }
            if (variable_get('checkmail_size_of_mailbox', 1)) {
              $block['content'] .= '<li>' . $mail['size'] . t(' mailbox size in KB') . '</li>';
            }

            $block['content'] .= '</ul>';
          }
          else {
            $block['content'] = t('There was a problem checking the mailbox. Please verify that your login credentials are correct, and then check the logs for errors, correct them and try again.');
          }

          break;
      }

      return $block;
  }
}


/**
 * Generates the output when the menu link is clicked
 */
function checkmail_page() {
  $mail = _checkmail();
  if ($mail['status'] == 'success') {
    if (variable_get('checkmail_number_of_messages', 1) && variable_get('checkmail_number_of_unread_messages', 1)) {
      $output = '<p>'. t('!account has !mailsum !e-mail (!unread of them are unread).', array(
        '!account' => $mail['login_id'],
        '!mailsum' => $mail['messages'],
        '!e-mail' => $mail['messages'] == 1 ? t('e-mail') : t('e-mails'),
        '!unread' => $mail['unread'])
      );
    }
    elseif (variable_get('checkmail_number_of_messages', 1) && !variable_get('checkmail_number_of_unread_messages', 1)) {
      $output = '<p>'. t('!account has !mailsum !e-mail.', array(
        '!account' => $mail['login_id'],
        '!mailsum' => $mail['messages'],
        '!e-mail' => $mail['messages'] == 1 ? t('e-mail') : t('e-mails')));
    }
    if (variable_get('checkmail_size_of_mailbox', 1)) {
      $output .= '<br />'. t('The total size of the inbox is !mailmem KB.', array('!mailmem' => sprintf("%01.2f", $mail['size'] ? $mail['size']/1024 : $mail['size']))) .'</p>';
    }
  }
  else {
    $output = '<p>'. t('There was a problem checking the mailbox. Please verify that your login credentials are correct, and then check the logs for errors, correct them and try again.') .'</p>';
  }

  echo theme('page', $output);
}


/**
 * Check the server and set the cache.
 *
 * @return array
 *   An associated array with the following keys:
 *   - status: a string with either 'failure' or 'success'.
 *   - server_type: a string with the type of server being quried,
 *   - login_id: a string with the login ID for the mailbox.
 *   - messages: an integer with the total number of messages.
 *   - recent: an integer with the number of recent (new) messages (IMAP only).
 *   - unread: an integer with the number of unread messages (IMAP only).
 *   - size: an integer with the size of the mailbox (POP3 only).
 */
function _checkmail() {
  // Initialize the server variables.
  $server_type    = variable_get('checkmail_server_type', 'pop3');
  $server_address = variable_get('checkmail_server_address', '');
  $server_port    = (int)variable_get('checkmail_server_port', 110);

  // Initialize the user variables.
  $auth_method = variable_get('checkmail_account_info', '');
  if ($auth_method == 'user_account' || $auth_method == 'user_fields') {
    global $user;
    $login_id = $user->checkmail_username;
    module_load_include('inc', 'checkmail', 'checkmail.common');
    $login_password = _checkmail_decrypt_password($user->checkmail_passsword);
  }
  elseif ($auth_method == 'admin_fields') {
    $login_id = variable_get('checkmail_login_id', '');
    module_load_include('inc', 'checkmail', 'checkmail.common');
    $login_password = _checkmail_decrypt_password(variable_get('checkmail_login_password', ''));
  }

  // Set the initial return value.
  $ret_val = array('status' => 'failure', 'server_type' => $server_type, 'login_id' => $login_id, 'messages' => 0, 'recent' => 0, 'unread' => 0, 'size' => 0);

  // Error checking.
  if (empty($server_address)) {
    watchdog('checkmail', 'The e-mail server address is not configured in the administrative settings.', array(), WATCHDOG_ERROR);
    return $ret_val;
  }
  if (empty($login_id)) {
    watchdog('checkmail', 'There is no login ID configured for user !user.', array('!user' => $user->name), WATCHDOG_ERROR);
    return $ret_val;
  }

  switch ($server_type) {
    case 'pop3':
      $mailserver = fsockopen($server_address, $server_port, $errno, $errstr, 30);
      if (!$mailserver) {
        watchdog('checkmail', 'Cannot connect to mailserver: !server. Connection error: !errno: !errstr.', array('!server' => $server_address, '!errno' => $errno, '!errstr' => $errstr), WATCHDOG_ERROR);
      }
      else {
        $buffer = fgets($mailserver, 512);

        $buffer = "USER $login_id\n";
        fwrite($mailserver, $buffer);
        $buffer = fgets($mailserver, 512);

        $buffer = "PASS $login_password\n";
        fwrite($mailserver, $buffer);

        $buffer = fgets($mailserver, 512);

        if (substr($buffer, 0, 4) == '-ERR') {
          watchdog('checkmail', 'Invalid password or username for checking !account', array('!account' => $login_id), WATCHDOG_ERROR);
          fclose($mailserver);
        }
        else {
          $buffer = "STAT\n";
          fwrite($mailserver, $buffer);
          $buffer = fgets($mailserver, 512);

          $mailsum = (int)substr($buffer, 4, 2);
          $mailmem = (int)substr($buffer, 6, drupal_strlen($buffer) - 6);

          $buffer = "QUIT\n";
          fwrite($mailserver, $buffer);
          $buffer = fgets($mailserver, 512);

          fclose($mailserver);

          variable_set('checkmail_checked_time', time());
          variable_set('checkmail_cache_num', $mailsum);
          variable_set('checkmail_cache_mem', $mailmem);

          $ret_val['status']   = 'success';
          $ret_val['messages'] = $mailsum;
          $ret_val['size']     = $mailmem;
        }
      }

      break;

    case 'imap':
      // Prepare the flags for connecting to the server with.
      $imap_flags = '';
      if (variable_get('checkmail_secure_log_in', 0) == 1) {
        $imap_flags .= '/secure';
      }
      if (variable_get('checkmail_validate_cert', 0) == 1) {
        $imap_flags .= '/validate-cert';
      }
      else {
        $imap_flags .= '/novalidate-cert';
      }
      if (variable_get('checkmail_use_ssl', 0) == 1) {
        $imap_flags .= '/ssl';
      }
      if (variable_get('checkmail_use_tls', 0) == 1) {
        $imap_flags .= '/tls';
      }
      else {
        $imap_flags .= '/notls';
      }
      $server_string = '{'. $server_address .':'. $server_port . $imap_flags .'}';
      // resource imap_open ( string $mailbox , string $username ,
      //   string $password [, int $options = 0 [, int $n_retries = 0
      //   [, array $params = NULL ]]] )
      if (($imap_resource = imap_open($server_string, $login_id, $login_password, 0, 0)) == FALSE) {
        watchdog('checkmail', 'There was an error accessing the remote server: ' . imap_last_error(), array(), WATCHDOG_ERROR);
        return $ret_val;
      }

      $options =  SA_MESSAGES + SA_RECENT + SA_UNSEEN;
      $imap_status = imap_status($imap_resource, $server_string, $options);

      imap_close($imap_resource);

      variable_set('checkmail_checked_time', time());
      variable_set('checkmail_cache_num', $imap_status->messages);
      variable_set('checkmail_cache_recent', $imap_status->recent);
      variable_set('checkmail_cache_unread', $imap_status->unseen);

      $ret_val['status']   = 'success';
      $ret_val['messages'] = $imap_status->messages;
      $ret_val['recent']   = $imap_status->recent;
      $ret_val['unread']   = $imap_status->unseen;
      break;

    default:
      watchdog('checkmail', 'An invalid server type was specified when calling the _checkmail() function: "!server_type"', array('!server_type' => $server_type), WATCHDOG_ERROR);
      break;
  }

  return $ret_val;
}
